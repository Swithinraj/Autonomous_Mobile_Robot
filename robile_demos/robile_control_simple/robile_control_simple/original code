def ransac(points: np.ndarray, N: int,
           s: int, t: float) -> Tuple[float, float, float, float]:
    '''Returns the parameters of a plane
        ax + by + cz + d = 0
    that provides a best fit to the points in the given point cloud.

    Keyword arguments:
    points: np.ndarray -- point cloud to which to fit a plane
    N: int -- number of RANSAC iterations
    s: int -- minimum number of points to select for fitting a plane
    t: float -- distance threshold for inlier selection

    '''
    return None

# Assign the parameters of the best fitting plane to the variables below
a, b, c, d = [None,None,None,None]


def fit_plane(points: np.ndarray) -> Tuple[float, float, float, float]:
    """
    Takes an array of 3D points and returns the least-square estimate of the plane that passes through all of them. 
    Best to use with 3 points. Returns the plane in the form ax + by + cz + d = 0, with 
    """
    A = np.hstack((points, np.ones(len(points))[np.newaxis].T))
    U, S, VT = np.linalg.svd(A)
    a, b, c, d = VT[-1]
    return a, b, c, d

# YOUR CODE HERE